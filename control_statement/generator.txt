제너레이터(generator) 설명 :

이터레이터 - 반복 가능한 객체를 말한다.
이러테레이블 - 이러테이블은 반복 가능하다는 뜻을 가진다. 
    loop 연산이 가능하며 해당 위치를 이동해 가면서 값을 사용할 수 있다는 뜻이다.

제너레이터 - 반복자(iterator)와 같은 루프의 작용을 컨트롤하기 위해 쓰여지는 특별한 함수 또는 루틴 이라는 의미도 있고
            이터레이터를 만들어주는 즉 반복가능한 객체로 만드는 행위라고 할 수 있다.

            일반함수가 호출되면 코드의 첫 번째행 부터 시작하여 리턴구문, 예외구문, 또는 리턴하지 않는 함수일 경우 마지막 구문을 실행된 후, 호출자(caller) 에게 모든 컨트롤을 리턴한다.
            그리고 함수가 가지고 있던 내부 함수와 모든 로컬 변수는 메모리상에서 사라진다. 같은 함수가 다시 호출되면 처음부터 다시 시작한다.

            제너레이터는 함수가 자신이 했던 일을 기억하면서 대기하고 있다가 다시 호출되면 전의 일을 이어서 하는, 조금 더 스마트한 함수라고 할 수 있다.



객체에 __iter__() 와 __next__() 메서드를 둘 다 정의하면 이터레이터 프로토콜을 구현한 것이다. yield 키워드를 사용하면 더 편리하다.
yield 키워드는 리턴과 다르게 각 반환값을 호출자에게 반환하고, 반환값이 모두 소진되었을 때에만 메서드가 종료된다.

__next__()는 컨테이너에의 다음값을 반환하는 함수이고
__iter__()는 자기 자신을 반환하는 함수이다.

yield 제너레이터 맥락에서 이터레이터를 만드는 좋은 도구이다.
이터레이터는 yield 키워드를 사용하여 코드 실행 중에 값을 반환할 수 있다. => __next__() 메서드를 호출할 때마다 어떤 값 하나를 추출한 후 해당 yield 표현식의 값을 반환한다.
StopIteration 예외가 발생할 때가지 반환한다.